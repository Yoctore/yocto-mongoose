/* yocto-mongoose - Utility tool to manage mongoose connection and auto loading models. - V1.2.6 */
"use strict";function Crud(a){this.logger=a,this.alias={create:["insert"],get:["read"],getOne:["readOne"],"delete":["destroy"],update:["modify"]}}var logger=require("yocto-logger"),_=require("lodash"),Q=require("q"),Schema=require("mongoose").Schema;Crud.prototype.insert=function(){return this.create.apply(this,arguments)},Crud.prototype.read=function(){return this.get.apply(this,arguments)},Crud.prototype.readOne=function(){return this.getOne.apply(this,arguments)},Crud.prototype.modify=function(){return this.update.apply(this,arguments)},Crud.prototype.destroy=function(){return this["delete"].apply(this,arguments)},Crud.prototype.getOne=function(a){return this.get(a,"findOne")},Crud.prototype.get=function(a,b){b=_.isString(b)&&!_.isEmpty(b)?b:"find",b=_.isString(a)?"findById":b;var c=Q.defer();return this[b](a,function(a,b){a?c.reject(a):c.resolve(b)}),c.promise},Crud.prototype["delete"]=function(a){var b=Q.defer();return _.isString(a)&&!_.isEmpty(a)?this.findByIdAndRemove(a,function(a,c){a?b.reject(a):b.resolve(c)}):b.reject(["Given id is not a string",_.isString(a)&&_.isEmpty(a)?" and is empty":""].join(" ")),b.promise},Crud.prototype.update=function(a,b){var c=_.isString(a)?"findByIdAndUpdate":"findOneAndUpdate",d=Q.defer();return this[c](a,b,{"new":!0},function(a,b){a?d.reject(a):d.resolve(b)}),d.promise},Crud.prototype.create=function(a){var b=Q.defer(),c=_.isFunction(this.save)?this:new this,d=!0,e=[];return _.isFunction(this.validate)&&(d=this.validate(a),e=d.error,a=_.has(d,"value")?d.value:a,d=_.isNull(d.error)),d?c instanceof this?(_.extend(c,a),c.save(function(a,c){a?b.reject(a):b.resolve(c)})):b.reject("[ Crud.create ] - Cannot save. invalid instance model"):b.reject(["[ Crud.create ] - Cannot save new schema.",e].join(" ")),b.promise},Crud.prototype.add=function(a,b){if(!_.isObject(a)&&!(a instanceof Schema)||!_.isArray(b))return this.logger.warning("[ Crud.add ] - Schema or exclude item given is invalid"),!1;var c=_.difference(Object.keys(Crud.prototype),["add"]);if(b=_.isArray(b)?b:[],!_.isEmpty(b)&&_.isArray(b)){var d=_.intersection(Object.keys(this.alias),b);_.each(d,function(a){b.push(this.alias[a])},this),b=_.flatten(b)}var e=_.difference(c,b),f=this;return _.each(e,function(b){_.isFunction(f[b])&&a["static"](b,f[b])}),a},module.exports=function(a){return(_.isUndefined(a)||_.isNull(a))&&(logger.warning("[ Crud.constructor ] - Invalid logger given. Use internal logger"),a=logger),new Crud(a)};