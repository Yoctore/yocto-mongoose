/* yocto-mongoose - Utility tool to manage mongoose connection and auto loading models. - V2.2.0 */

"use strict";var glob=require("glob"),logger=require("yocto-logger"),_=require("lodash"),Schema=require("mongoose").Schema,joi=require("joi");function Validator(e){this.logger=e}Validator.prototype.add=function(i,e,t,r){if(_.isString(e)&&_.isString(t)&&!_.isEmpty(e)&&!_.isEmpty(t)&&_.isObject(i)&&i instanceof Schema&&_.isString(r)&&!_.isEmpty(r)){var a=glob.sync(["**/",r,".js"].join(""),{cwd:e,realpath:!0,nocase:!0});if(0<a.length)return _.each(a,function(e){var r=require(e);_.has(r,t)&&_.isFunction(r[t])&&(this.logger.debug(["[ Validator.add ] - [",t,"] validator was founded.","Adding a new validate function on static property","for given schema"].join(" ")),i.static("validate",function(e){var i=r[t](this.enums);return joi.validate(e,i)}),i.static("getValidateSchema",function(){return r[t](this.enums)}))}.bind(this)),i;this.logger.warning(["[ Validator.add ] - Given directory path for","Validators seems to be empty.","Cannot add validator on schema."].join(" "))}else this.logger.error(["[ Validator.add ] - cannot process invalid path / name","/ model name or schema given."].join(" "));return!1},module.exports=function(e){return(_.isUndefined(e)||_.isNull(e))&&(logger.warning("[ Validator.constructor ] - Invalid logger given. Use internal logger"),e=logger),new Validator(e)};