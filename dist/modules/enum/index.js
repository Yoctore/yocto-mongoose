/* yocto-mongoose - Utility tool to manage mongoose connection and auto loading models. - V2.2.0 */

"use strict";var _=require("lodash"),fs=require("fs"),glob=require("glob"),joi=require("joi"),logger=require("yocto-logger");function Enums(e,r){this.logger=e,this.enums=[],this.Types=r}Enums.prototype.load=function(e){try{if(!_.isString(e)||_.isEmpty(e))throw"Invalid path given.";var i=joi.array().items(joi.object().required().keys({name:joi.string().required().empty(""),value:joi.array().required().min(1)})),r=glob.sync("**/*.json",{cwd:e,realpath:!0});_.each(r,function(e){var r=JSON.parse(fs.readFileSync(e,"utf-8")),n=joi.validate(r,i);_.isNull(n.error)?this.enums.push(n.value):this.logger.warning(["[ Enums.load.parse ] -  Cannot load item for [",e,"]",n.error].join(" "))}.bind(this)),this.enums=_.uniq(_.flatten(this.enums),"name")}catch(e){return this.logger.error(["[ Enums.load ] - Cannot load path from given enum path.",e].join(" ")),!1}return!0},Enums.prototype.get=function(e){if(_.isString(e)&&!_.isEmpty(e)){if(_.isArray(this.enums)&&!_.isEmpty(this.enums))return _.result(_.find(this.enums,["name",e]),"value")||[];this.logger.warning("[ Enums.get ] - enums list is empty. try to load enums before get")}else this.logger.warning("[ Enums.get ] - given name is empty or not a string.");return[]},module.exports=function(e,r){return(_.isUndefined(e)||_.isNull(e))&&(logger.warning("[ Enums.constructor ] - Invalid logger given. Use internal logger"),e=logger),new Enums(e,r)};