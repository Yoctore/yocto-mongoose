/* yocto-mongoose - Utility tool to manage mongoose connection and auto loading models. - V1.7.0 */
"use strict";function Method(a){this.logger=a}var glob=require("glob"),logger=require("yocto-logger"),_=require("lodash"),Schema=require("mongoose").Schema,joi=require("joi"),utils=require("yocto-utils");Method.prototype.add=function(a,b,c,d,e){if(_.isString(b)&&_.isArray(c)&&!_.isEmpty(b)&&!_.isEmpty(c)&&_.isObject(a)&&a instanceof Schema&&_.isString(d)&&!_.isEmpty(d)){var f=glob.sync(["**/",d,".js"].join(""),{cwd:b,realpath:!0,nocase:!0});if(f.length>0)return _.each(f,function(b){var d=require(b);_.each(c,function(b){var c=joi.object().keys({type:joi.string().required().empty().allow(["static","method","post"]),name:joi.string().required().empty(),event:joi.alternatives().when("type",{is:"post",then:joi.string().required().empty().valid(["init","validate","save","remove","count","find","findOne","findOneAndRemove","findOneAndUpdate","update"]),otherwise:joi.optional()}),redis:joi.object().optional().keys({enable:joi["boolean"]().required()["default"](!1),expire:joi.number().optional().min(0)["default"](0)})}),f=joi.validate(b,c);if(_.isNull(f.error))if(_.has(d,b.name)&&_.isFunction(d[b.name])){if(this.logger.debug(["[ Method.add ] - Method [",b.name,"] founded adding new","method"===b.type?"instance":b.type,"method for given schema"].join(" ")),"post"===b.type){var g=this.logger;a.post(b.event,function(){return d[b.name].apply(this,_.flatten([arguments,g]))})}else a[b.type](b.name,function(){return d[b.name].apply(this,arguments)});b.redis&&_.has(b.redis,"enable")&&b.redis.enable&&a["static"]("redis",function(){return{instance:e,expire:b.redis.expire||0}})}else this.logger.warning(["[ Method.add ] - Cannot found method [",b.name,"] for current model"].join(" "));else this.logger.error(["[ Method.add ] - Cannot add method for item",utils.obj.inspect(b),f.error].join(" "))},this)},this),a;this.logger.warning(["[ Method.add ] - Given directory path for","Methods seems to be empty.","Cannot add method on schema."].join(" "))}else this.logger.error("[ Method.add ] - cannot process invalid path / name or schema given.");return!1},module.exports=function(a){return(_.isUndefined(a)||_.isNull(a))&&(logger.warning("[ Method.constructor ] - Invalid logger given. Use internal logger"),a=logger),new Method(a)};